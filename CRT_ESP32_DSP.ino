
#define LED_BUILTIN 2

TaskHandle_t Task1;
TaskHandle_t Task2;




void TaskCode1( void * pcParameters)
{
  while (1) {
    digitalWrite(LED_BUILTIN, HIGH);   // turn the LED on (HIGH is the voltage level)
    delay(500);  
    digitalWrite(LED_BUILTIN, LOW);    // turn the LED off by making the voltage LOW
    delay(100); 
  }
}


// the following are X, Y, X, Y except that a single "255"
// indicatete the following is a "dark" vector (move instead
// of draw)
// the first vector is assumed "dark". Code will not accept a "255"
// at the beginning

// The Hershey font (see paulbourke.net/dataformats/hershey)
const uint16_t hershey_idx[]  = {
  0,2,19,30,51,103,165,235,251,273,295,311,
  322,340,346,358,364,400,410,440,472,485,
  521,569,580,640,688,711,740,748,759,
  767,808,917,933,979,1017,1048,1069,1085,
  1130,1146,1152,1174,1190,1201,1222,1238,
  1282,1309,1358,1390,1432,1443,1465,1476,
  1497,1508,1521,1537,1558,1564,1585,1605,
  1611,1627,1662,1697,1727,1762,1798,1815,
  1860,1881,1898,1921,1937,1943,1979,2000,
  2036,2071,2106,2123,2159,2176,2197,2208,
  2229,2240,2259,2275,2353,2359,2437};


const uint8_t hershey_font[]  = {
0,16, /* Ascii 32 */
  
15,10, /* Ascii 33 */
  12,28,12,14,255,12,9,11,8,12,7,13,8,12,9,
9,16, /* Ascii 34 */
  11,28,11,21,255,19,28,19,21,
19,21, /* Ascii 35 */
  18,32,11,0,255,24,32,17,0,255,11,19,25,19,255,10,13,24,13,
50,20, /* Ascii 36 */
  15,32,15,3,255,19,32,19,3,255,24,25,22,27,19,28,15,28,12,27,10,25,10,23,11,21,12,20,14,19,20,17,22,16,23,15,24,13,24,10,22,8,19,7,15,7,12,8,10,10,
60,24, /* Ascii 37 */
  28,28,10,7,255,15,28,17,26,17,24,16,22,14,21,12,21,10,23,10,25,11,27,13,28,15,28,17,27,20,26,23,26,26,27,28,28,255,24,14,22,13,21,11,21,9,23,7,25,7,27,8,28,10,28,12,26,14,24,14,
68,26, /* Ascii 38 */
  30,19,30,20,29,21,28,21,27,20,26,18,24,13,22,10,20,8,18,7,14,7,12,8,11,9,10,11,10,13,11,15,12,16,19,20,20,21,21,23,21,25,20,27,18,28,16,27,15,25,15,23,16,20,18,17,23,10,25,8,27,7,29,7,30,8,30,9,
14,10, /* Ascii 39 */
  12,26,11,27,12,28,13,27,13,25,12,23,11,22,
20,14, /* Ascii 40 */
  18,32,16,30,14,27,12,23,11,18,11,14,12,9,14,5,16,2,18,0,
20,14, /* Ascii 41 */
  10,32,12,30,14,27,16,23,17,18,17,14,16,9,14,5,12,2,10,0,
14,16, /* Ascii 42 */
  15,28,15,16,255,10,25,20,19,255,20,25,10,19,
9,26, /* Ascii 43 */
  20,25,20,7,255,11,16,29,16,
16,10, /* Ascii 44 */
  13,8,12,7,11,8,12,9,13,8,13,6,12,4,11,3,
4,26, /* Ascii 45 */
  11,16,29,16,
10,10, /* Ascii 46 */
  12,9,11,8,12,7,13,8,12,9,
4,22, /* Ascii 47 */
  27,32,9,0,
34,20, /* Ascii 48 */
  16,28,13,27,11,24,10,19,10,16,11,11,13,8,16,7,18,7,21,8,23,11,24,16,24,19,23,24,21,27,18,28,16,28,
8,20, /* Ascii 49 */
  13,24,15,25,18,28,18,7,
28,20, /* Ascii 50 */
  11,23,11,24,12,26,13,27,15,28,19,28,21,27,22,26,23,24,23,22,22,20,20,17,10,7,24,7,
30,20, /* Ascii 51 */
  12,28,23,28,17,20,20,20,22,19,23,18,24,15,24,13,23,10,21,8,18,7,15,7,12,8,11,9,10,11,
11,20, /* Ascii 52 */
  20,28,10,14,25,14,255,20,28,20,7,
34,20, /* Ascii 53 */
  22,28,12,28,11,19,12,20,15,21,18,21,21,20,23,18,24,15,24,13,23,10,21,8,18,7,15,7,12,8,11,9,10,11,
46,20, /* Ascii 54 */
  23,25,22,27,19,28,17,28,14,27,12,24,11,19,11,14,12,10,14,8,17,7,18,7,21,8,23,10,24,13,24,14,23,17,21,19,18,20,17,20,14,19,12,17,11,14,
9,20, /* Ascii 55 */
  24,28,14,7,255,10,28,24,28,
58,20, /* Ascii 56 */
  15,28,12,27,11,25,11,23,12,21,14,20,18,19,21,18,23,16,24,14,24,11,23,9,22,8,19,7,15,7,12,8,11,9,10,11,10,14,11,16,13,18,16,19,20,20,22,21,23,23,23,25,22,27,19,28,15,28,
46,20, /* Ascii 57 */
  23,21,22,18,20,16,17,15,16,15,13,16,11,18,10,21,10,22,11,25,13,27,16,28,17,28,20,27,22,25,23,21,23,16,22,11,20,8,17,7,15,7,12,8,11,10,
21,10, /* Ascii 58 */
  12,21,11,20,12,19,13,20,12,21,255,12,9,11,8,12,7,13,8,12,9,
27,10, /* Ascii 59 */
  12,21,11,20,12,19,13,20,12,21,255,13,8,12,7,11,8,12,9,13,8,13,6,12,4,11,3,
6,24, /* Ascii 60 */
  27,25,11,16,27,7,
9,26, /* Ascii 61 */
  11,19,29,19,255,11,13,29,13,
6,24, /* Ascii 62 */
  11,25,27,16,11,7,
39,18, /* Ascii 63 */
  10,23,10,24,11,26,12,27,14,28,18,28,20,27,21,26,22,24,22,22,21,20,20,19,16,17,16,14,255,16,9,15,8,16,7,17,8,16,9,
107,27, /* Ascii 64 */
  25,20,24,22,22,23,19,23,17,22,16,21,15,18,15,15,16,13,18,12,21,12,23,13,24,15,255,19,23,17,21,16,18,16,15,17,13,18,12,255,25,23,24,15,24,13,26,12,28,12,30,14,31,17,31,19,30,22,29,24,27,26,25,27,22,28,19,28,16,27,14,26,12,24,11,22,10,19,10,16,11,13,12,11,14,9,16,8,19,7,22,7,25,8,27,9,28,10,255,26,23,25,15,25,13,26,12,
14,18, /* Ascii 65 */
  16,28,8,7,255,16,28,24,7,255,11,14,21,14,
44,21, /* Ascii 66 */
  11,28,11,7,255,11,28,20,28,23,27,24,26,25,24,25,22,24,20,23,19,20,18,255,11,18,20,18,23,17,24,16,25,14,25,11,24,9,23,8,20,7,11,7,
36,21, /* Ascii 67 */
  25,23,24,25,22,27,20,28,16,28,14,27,12,25,11,23,10,20,10,15,11,12,12,10,14,8,16,7,20,7,22,8,24,10,25,12,
29,21, /* Ascii 68 */
  11,28,11,7,255,11,28,18,28,21,27,23,25,24,23,25,20,25,15,24,12,23,10,21,8,18,7,11,7,
19,19, /* Ascii 69 */
  11,28,11,7,255,11,28,24,28,255,11,18,19,18,255,11,7,24,7,
14,18, /* Ascii 70 */
  11,28,11,7,255,11,28,24,28,255,11,18,19,18,
43,21, /* Ascii 71 */
  25,23,24,25,22,27,20,28,16,28,14,27,12,25,11,23,10,20,10,15,11,12,12,10,14,8,16,7,20,7,22,8,24,10,25,12,25,15,255,20,15,25,15,
14,22, /* Ascii 72 */
  11,28,11,7,255,25,28,25,7,255,11,18,25,18,
4,8, /* Ascii 73 */
  11,28,11,7,
20,16, /* Ascii 74 */
  19,28,19,12,18,9,17,8,15,7,13,7,11,8,10,9,9,12,9,14,
14,21, /* Ascii 75 */
  11,28,11,7,255,25,28,11,14,255,16,19,25,7,
9,17, /* Ascii 76 */
  11,28,11,7,255,11,7,23,7,
19,24, /* Ascii 77 */
  11,28,11,7,255,11,28,19,7,255,27,28,19,7,255,27,28,27,7,
14,22, /* Ascii 78 */
  11,28,11,7,255,11,28,25,7,255,25,28,25,7,
42,22, /* Ascii 79 */
  16,28,14,27,12,25,11,23,10,20,10,15,11,12,12,10,14,8,16,7,20,7,22,8,24,10,25,12,26,15,26,20,25,23,24,25,22,27,20,28,16,28,
25,21, /* Ascii 80 */
  11,28,11,7,255,11,28,20,28,23,27,24,26,25,24,25,21,24,19,23,18,20,17,11,17,
47,22, /* Ascii 81 */
  16,28,14,27,12,25,11,23,10,20,10,15,11,12,12,10,14,8,16,7,20,7,22,8,24,10,25,12,26,15,26,20,25,23,24,25,22,27,20,28,16,28,255,19,11,25,5,
30,21, /* Ascii 82 */
  11,28,11,7,255,11,28,20,28,23,27,24,26,25,24,25,22,24,20,23,19,20,18,11,18,255,18,18,25,7,
40,20, /* Ascii 83 */
  24,25,22,27,19,28,15,28,12,27,10,25,10,23,11,21,12,20,14,19,20,17,22,16,23,15,24,13,24,10,22,8,19,7,15,7,12,8,10,10,
9,16, /* Ascii 84 */
  15,28,15,7,255,8,28,22,28,
20,22, /* Ascii 85 */
  11,28,11,13,12,10,14,8,17,7,19,7,22,8,24,10,25,13,25,28,
9,18, /* Ascii 86 */
  8,28,16,7,255,24,28,16,7,
19,24, /* Ascii 87 */
  9,28,14,7,255,19,28,14,7,255,19,28,24,7,255,29,28,24,7,
9,20, /* Ascii 88 */
  10,28,24,7,255,24,28,10,7,
11,18, /* Ascii 89 */
  8,28,16,18,16,7,255,24,28,16,18,
14,20, /* Ascii 90 */
  24,28,10,7,255,10,28,24,28,255,10,7,24,7,
19,14, /* Ascii 91 */
  11,32,11,0,255,12,32,12,0,255,11,32,18,32,255,11,0,18,0,
4,14, /* Ascii 92 */
  7,28,21,4,
19,14, /* Ascii 93 */
  16,32,16,0,255,17,32,17,0,255,10,32,17,32,255,10,0,17,0,
18,16, /* Ascii 94 */
  13,22,15,25,17,22,255,10,19,15,24,20,19,255,15,24,15,7,
4,16, /* Ascii 95 */
  7,5,23,5,
14,10, /* Ascii 96 */
  13,28,12,27,11,25,11,23,12,22,13,23,12,24,
33,19, /* Ascii 97 */
  22,21,22,7,255,22,18,20,20,18,21,15,21,13,20,11,18,10,15,10,13,11,10,13,8,15,7,18,7,20,8,22,10,
33,19, /* Ascii 98 */
  11,28,11,7,255,11,18,13,20,15,21,18,21,20,20,22,18,23,15,23,13,22,10,20,8,18,7,15,7,13,8,11,10,
28,18, /* Ascii 99 */
  22,18,20,20,18,21,15,21,13,20,11,18,10,15,10,13,11,10,13,8,15,7,18,7,20,8,22,10,
33,19, /* Ascii 100 */
  22,28,22,7,255,22,18,20,20,18,21,15,21,13,20,11,18,10,15,10,13,11,10,13,8,15,7,18,7,20,8,22,10,
34,18, /* Ascii 101 */
  10,15,22,15,22,17,21,19,20,20,18,21,15,21,13,20,11,18,10,15,10,13,11,10,13,8,15,7,18,7,20,8,22,10,
15,12, /* Ascii 102 */
  17,28,15,28,13,27,12,24,12,7,255,9,21,16,21,
43,19, /* Ascii 103 */
  22,21,22,5,21,2,20,1,18,0,15,0,13,1,255,22,18,20,20,18,21,15,21,13,20,11,18,10,15,10,13,11,10,13,8,15,7,18,7,20,8,22,10,
19,19, /* Ascii 104 */
  11,28,11,7,255,11,17,14,20,16,21,19,21,21,20,22,17,22,7,
15,8, /* Ascii 105 */
  10,28,11,27,12,28,11,29,10,28,255,11,21,11,7,
21,10, /* Ascii 106 */
  12,28,13,27,14,28,13,29,12,28,255,13,21,13,4,12,1,10,0,8,0,
14,17, /* Ascii 107 */
  11,28,11,7,255,21,21,11,11,255,15,15,22,7,
4,8, /* Ascii 108 */
  11,28,11,7,
34,30, /* Ascii 109 */
  11,21,11,7,255,11,17,14,20,16,21,19,21,21,20,22,17,22,7,255,22,17,25,20,27,21,30,21,32,20,33,17,33,7,
19,19, /* Ascii 110 */
  11,21,11,7,255,11,17,14,20,16,21,19,21,21,20,22,17,22,7,
34,19, /* Ascii 111 */
  15,21,13,20,11,18,10,15,10,13,11,10,13,8,15,7,18,7,20,8,22,10,23,13,23,15,22,18,20,20,18,21,15,21,
33,19, /* Ascii 112 */
  11,21,11,0,255,11,18,13,20,15,21,18,21,20,20,22,18,23,15,23,13,22,10,20,8,18,7,15,7,13,8,11,10,
33,19, /* Ascii 113 */
  22,21,22,0,255,22,18,20,20,18,21,15,21,13,20,11,18,10,15,10,13,11,10,13,8,15,7,18,7,20,8,22,10,
15,13, /* Ascii 114 */
  11,21,11,7,255,11,15,12,18,14,20,16,21,19,21,
34,17, /* Ascii 115 */
  21,18,20,20,17,21,14,21,11,20,10,18,11,16,13,15,18,14,20,13,21,11,21,10,20,8,17,7,14,7,11,8,10,10,
15,12, /* Ascii 116 */
  12,28,12,11,13,8,15,7,17,7,255,9,21,16,21,
19,19, /* Ascii 117 */
  11,21,11,11,12,8,14,7,17,7,19,8,22,11,255,22,21,22,7,
9,16, /* Ascii 118 */
  9,21,15,7,255,21,21,15,7,
19,22, /* Ascii 119 */
  10,21,14,7,255,18,21,14,7,255,18,21,22,7,255,26,21,22,7,
9,17, /* Ascii 120 */
  10,21,21,7,255,21,21,10,7,
17,16, /* Ascii 121 */
  9,21,15,7,255,21,21,15,7,13,3,11,1,9,0,8,0,
14,17, /* Ascii 122 */
  21,21,10,7,255,10,21,21,21,255,10,7,21,7,
76,14, /* Ascii 123 */
  16,32,14,31,13,30,12,28,12,26,13,24,14,23,15,21,15,19,13,17,255,14,31,13,29,13,27,14,25,15,24,16,22,16,20,15,18,11,16,15,14,16,12,16,10,15,8,14,7,13,5,13,3,14,1,255,13,15,15,13,15,11,14,9,13,8,12,6,12,4,13,2,14,1,16,0,
4,8, /* Ascii 124 */
  11,32,11,0,
76,14, /* Ascii 125 */
  12,32,14,31,15,30,16,28,16,26,15,24,14,23,13,21,13,19,15,17,255,14,31,15,29,15,27,14,25,13,24,12,22,12,20,13,18,17,16,13,14,12,12,12,10,13,8,14,7,15,5,15,3,14,1,255,15,15,13,13,13,11,14,9,15,8,16,6,16,4,15,2,14,1,12,0,
46,24, /* Ascii 126 */
  10,13,10,15,11,18,13,19,15,19,17,18,21,15,23,14,25,14,27,15,28,17,6,6,10,15,11,17,13,18,15,18,17,17,21,14,23,13,25,13,27,14,28,17,28,19,
   
};

#define DAC1 25
#define DAC2 26


// Scale factors for the 8 bits DAC
# define SCALE_X 255.0/255.0
# define SCALE_Y 255.0/255.0




 
void plot(byte x, byte y)
{
    dacWrite(DAC1, x*SCALE_X);
    dacWrite(DAC2, y*SCALE_Y); 
}

/*  Quadrants
    2  |  1
-------|-----
    3  |  4

*/
void vector(byte x1, byte y1, byte x2, byte y2)
{
    // optimized implementation of Bresenham's Algorithm
    // also known as a DDA - digital differential analyzer
    int acc;

    // special routines for horizontal and vertical lines
    // to improve performance of the SPI version
    // aren't needed for the direct-load DAC
#if 1
  if (x1 == x2) { // trivial vertical
        if (y1 < y2)  { // up
            for (; y1 < y2; y1++) {
                plot(x1, y1);
            }
          }
        else {   // down
            for (; y1 > y2; y1--) {
                plot(x1, y1);
            }
         }
    }
    else if (y1 == y2) { // trivial horizontal
        if (x1 < x2) { // right
            for (; x1 < x2; x1++) {
                plot(x1, y1);
            }
        }
        else {  // left
            for (; x1 > x2; x1--) {
                plot(x1, y1);
            }
        }
    }
    else
#endif
    // for speed, there are 8 DDA's, one for each octant
    if (y1 < y2) { // quadrant 1 or 2
        byte dy = y2 - y1;
        if (x1 < x2) { // quadrant 1
            byte dx = x2 - x1;
            if (dx > dy) { // < 45
                acc = (dx >> 1);
                for (; x1 < x2; x1++) {
                    plot(x1, y1);
                    acc -= dy;
                    if (acc < 0) {
                        y1++;
                        acc += dx;
                    }
                }
            }
            else {   // > 45
                acc = dy >> 1;
                for (; y1 < y2; y1++) {
                    plot(x1, y1);
                    acc -= dx;
                    if (acc < 0) {
                        x1++;
                        acc += dy;
                    }
                }
            }
        }
        else {  // quadrant 2
            byte dx = x1 - x2;
            if (dx > dy) { // < 45
                acc = dx >> 1;
                for (; x1 > x2; x1--) {
                    plot(x1, y1);
                    acc -= dy;
                    if (acc < 0) {
                        y1++;
                        acc += dx;
                    }
                }
            }
            else {  // > 45
                acc = dy >> 1;
                for (; y1 < y2; y1++) {
                    plot(x1, y1);
                    acc -= dx;
                    if (acc < 0) {
                        x1--;
                        acc += dy;
                    }
                }
            }        
        }
    }
    else { // quadrant 3 or 4
        byte dy = y1 - y2;
        if (x1 < x2) { // quadrant 4
            byte dx = x2 - x1;
            if (dx > dy) {  // < 45
                acc = dx >> 1;
                for (; x1 < x2; x1++) {
                    plot(x1, y1);
                    acc -= dy;
                    if (acc < 0) {
                        y1--;
                        acc += dx;
                    }
                }
            
            }
            else {  // > 45
                acc = dy >> 1;
                for (; y1 > y2; y1--) {
                    plot(x1, y1);
                    acc -= dx;
                    if (acc < 0) {
                        x1++;
                        acc += dy;
                    }
                }

            }
        }
        else {  // quadrant 3
            byte dx = x1 - x2;
            if (dx > dy) { // < 45
                acc = dx >> 1;
                for (; x1 > x2; x1--) {
                    plot(x1, y1);
                    acc -= dy;
                    if (acc < 0) {
                        y1--;
                        acc += dx;
                    }
                }

            }
            else {  // > 45
                acc = dy >> 1;
                for (; y1 > y2; y1--) {
                    plot(x1, y1);
                    acc -= dx;
                    if (acc < 0) {
                        x1--;
                        acc += dy;
                    }
                }
            }
        }
    
    }
}

/* ------------------------------------------------
 *  Draw the content of a buffer 
 * ------------------------------------------------*/
void draw(prog_uchar *image, int imagesize) {
    bool darkvector = false;
    int i = 0;
    byte x1 = pgm_read_byte_near(image+i++);
    byte y1 = pgm_read_byte_near(image+i++);
    while (i < imagesize) {
        byte x2 = pgm_read_byte_near(image+i++);
        if (x2 == 255) { // dark vector (move)
            x2 = pgm_read_byte_near(image+i++);
            darkvector = true;
        }
        byte y2 = pgm_read_byte_near(image+i++);
        if (!darkvector) vector(x1, y1, x2, y2);
        else darkvector = false;
        x1 = x2;
        y1 = y2;
    }
}

/* ------------------------------------------------
 *  Draw a character at position x,y
 * ------------------------------------------------*/
void drawchar(const uint8_t *font, const uint16_t *fontidx, char c, byte x, byte y) {
    bool darkvector = false;
    int idx = pgm_read_word_near(fontidx+(c-32));
    int end_byte = idx+pgm_read_byte_near(font+idx++)+1;
    int width = pgm_read_byte_near(font+idx++);
    byte x1 = pgm_read_byte_near(font+idx++);
    byte y1 = pgm_read_byte_near(font+idx++);
    while ( idx < end_byte) {
        byte x2 = pgm_read_byte_near(font+idx++);
        if (x2 == 255) { // dark vector (move)
            x2 = pgm_read_byte_near(font+idx++);
            darkvector = true;
        }
        byte y2 = pgm_read_byte_near(font+idx++);
        if (!darkvector) vector(x+x1, y+y1, x+x2, y+y2);
        else darkvector = false;
        x1 = x2;
        y1 = y2;
    }
}

unsigned char width(const uint8_t *font, const uint16_t *fontidx, char c) {
    int idx = pgm_read_word_near(fontidx+(c-32));
    return pgm_read_byte_near(font+idx+1);
}

void draw_string(const uint8_t *font, const uint16_t *fontidx, char* s, int x, int y) {
  int i=0;
  char c;
  while ( c=s[i++]) {
    drawchar(hershey_font, hershey_idx, c, x,y);
    x+= width(hershey_font, hershey_idx, c)+2;
  }
}

TaskHandle_t dsptask_hnd;


void dsptask_code ( void* pvParameters )
{
  int mode=0;
  int i=0;
  while(1) {
    i++;
    if (i==50) {  i=0;}
    if (mode == 2) mode =0;
    switch (mode) {
      case 0: 
        draw_string(hershey_font, hershey_idx, "Second line", 0,100);
        draw_string(hershey_font, hershey_idx, "Eric did it!", 0,200);
        draw_string(hershey_font, hershey_idx, "Hershey font", 0,50);
        break;
      case 1:
        vector(0,0,255,0);
        vector(255,0,255,255);
        vector(255,255,0,255);
        vector(0,255,0,0);
        break;
      default:
        break;
    }
  }
}

void setup() {

    // initialize digital pin LED_BUILTIN as an output.
  pinMode(LED_BUILTIN, OUTPUT);

  xTaskCreatePinnedToCore(
    dsptask_code,
    "Task 1",
    10000,
    NULL,
    1,&dsptask_hnd,0);
     
}

void loop() 
{

}
